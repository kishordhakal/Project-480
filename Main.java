package com.mycompany.assignta;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Ramez Khalaf
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public Main() {
        initComponents();
        
        // Center the form
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        startButton = new javax.swing.JButton();
        studentTextField = new javax.swing.JTextField();
        scheduleTextField = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        startButton.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        startButton.setText("Start");

        studentTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        studentTextField.setText("Enter students.csv file path here...");
        studentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentTextFieldActionPerformed(evt);
            }
        });

        scheduleTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        scheduleTextField.setText("Enter schedule.csv file path here...");

        titleLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Assign TAs");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scheduleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(120, 120, 120))
            .addGroup(layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(55, 55, 55)
                .addComponent(studentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(scheduleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
        );

        pack();
    }// </editor-fold>                        

    private void studentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
        
        // ~~~START CODE~~~
        
        try 
        {
            ArrayList<Student> students = new ArrayList();
            ArrayList<Course> courses = new ArrayList();
            ArrayList<Student> students392 = new ArrayList();
            ArrayList<Student> students492 = new ArrayList();
            final int TYPE392 = 392;
            final int TYPE492 = 492;
            final int NUMBER_OF_COURSES = 44;   // 
            final int NUMBER_OF_HOURS = 32;     // better way to get 
            
            
            // Record student data
            setStudents(students);
            // Print ArrayList<Student> data
            System.out.println("\nSTUDENTS: ");
            printStudentData(students);
          
            // Record course data
            setCourseData(courses);
            // Print ArrayList<Course> data
            System.out.println("\nCOURSE SCHEDULE: ");
            printCourseData(courses);
            
            // Sort Students into two ArrayLists (392 and 492)
            for(Student student: students)
            {
                if(student.getType() == TYPE392)
                    students392.add(student);
                else
                    students492.add(student);
            }
            students.clear();
            
            
            // Sort arraylists by priority
            Collections.sort(students392);
            Collections.sort(students492);
            
            
            // for each student with priority 1, check their availability. Then check for students with priority 2.
            //Queue<Student> queue = new LinkedList();
            
            
            // Assign CS 392 Students[]
            assignTAs(students392, courses);
            assignTAs(students492, courses);
            
            
            // Print new ArrayLists
            System.out.println("\nSTUDENTS (CS392): ");
            printStudentData(students392);
            System.out.println("\nSTUDENTS (CS492): ");
            printStudentData(students492);
            
            
            System.out.println("\nCourses ");
            printCourseAssignments(courses);
            
            // THEN, CHECK IF THERE ARE ANY LEFTOVER 392/492 students left. If so, put them in any course with less than 2 TAs that works with their availability.
            
            // Sort with comparator. If multiple attributes are equal, then sort by the next priority.
            //I.E., if multiple students graduate 2022, then sort by quarter. If graduation quarter is the same too, then sort by coursesTaken.
            
            /*
                PRIORITY:
                GraduationYear/GraduationQuarter > Courses Taken > VB/Python Experience > Availability > 
            
                *one of each type per course*
            */
            
            /* 
                QUESTIONS:
                How should "In Ellensburg" status influence the algorithm?
                Which classes need VB experience? Python Experience?
            
            */
          
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField scheduleTextField;
    private javax.swing.JButton startButton;
    private javax.swing.JTextField studentTextField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration                   

   //Assign students to courses
   public static void assignTAs(ArrayList<Student> students, ArrayList<Course> courses)
   {
        final int NUMBER_OF_COURSES = 44;   // 
        final int NUMBER_OF_HOURS = 32;     // better way to get 
        
        
        // Checks if the course AND student are available at that time. Does course already have a TA of that type? 
        for(int i = 0; i < students.size(); i++)
        {
            if(students.get(i).getType() == 392)
            {
                if(students.get(i).getPriority() == 1)
                {
                    //check availability        
                    // Put student in the first availability you find. If another student isnt available at an available time, check one of the times thats already taken.
                    // If the other student is available at that time, and the assigned student is also available at an empty time, then reassign the assigned student
                    for(int j = NUMBER_OF_COURSES - 1; j >= 0; j--)    // for each hour of the day, attempt to assign students to a course active during that hour
                    {
                        for(int x = 0; x < NUMBER_OF_HOURS; x++)  // Another loop to go through and check/assign each course.
                        {
                            //Check each course to see if it has 0, 1, or 2 TAs.
                            int[] assignedTATypes = courses.get(j).getAssignedTATypes();
                            boolean[] availability = students.get(i).getAvailability();
                            String regex = "\\d+";          // regex to check start time.
                            Pattern patt = Pattern.compile(regex);
                            Matcher matcher = patt.matcher(courses.get(j).getStartTime());

                            // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                            if(students.get(i).getCourseAssignment() == 0 && availability[x] && 
                                    matcher.find() && matcher.group().startsWith(String.valueOf(x)) && assignedTATypes[1] == 0)// && students492.get(i).getCoursesTaken().get)
                            {
                                // If course is in person, AND student is on campus, then assign them to that course.
                                if(courses.get(j).getCampus().equalsIgnoreCase("Eburg") && students.get(i).getInEllensburg() == true)
                                {
                                    courses.get(j).setAssignedTAs(students.get(i).getId());
                                    courses.get(j).setAssignedTATypes(true, false);
                                    students.get(i).setCourseAssignment(Integer.parseInt(courses.get(j).getCat()));
                                }
                                // if course is online, and student is online, then assign them to that course.
                                else if(courses.get(j).getCampus().equalsIgnoreCase("Web") && students.get(i).getInEllensburg() == false)
                                {
                                    courses.get(j).setAssignedTAs(students.get(i).getId());
                                    courses.get(j).setAssignedTATypes(true, false);
                                    students.get(i).setCourseAssignment(Integer.parseInt(courses.get(j).getCat()));
                                }
                                else
                                {
                                    // else, either the student is online and the course is in person, or the student in on campus and the course is online
                                    // if the student is on Campus and the course is online, then the student can still be assigned to that course. Save that for later though.
                                }
                            }
                            else
                            {
                                //Else, already has TA, move to next. So probably delete else.
                            }
                        }
                    }

                }
                else if(students.get(i).getPriority() == 2)
                {
                    // assignTAs(2);            //CREATE THIS METHOD
                }
                else if(students.get(i).getPriority() > 2)
                {
                    // assignTAs(3);            //HERE TOO
                }
            }
            else if(students.get(i).getType() == 492)
            {
                if(students.get(i).getPriority() == 1)
                {
                    //check availability        
                    // Put student in the first availability you find. If another student isnt available at an available time, check one of the times thats already taken.
                    // If the other student is available at that time, and the assigned student is also available at an empty time, then reassign the assigned student
                    for(int j = NUMBER_OF_COURSES - 1; j >= 0; j--)    // for each hour of the day, attempt to assign students to a course active during that hour
                    {
                        for(int x = 0; x < NUMBER_OF_HOURS; x++)  // Another loop to go through and check/assign each course.
                        {
                            //Check each course to see if it has 0, 1, or 2 TAs.
                            int[] assignedTATypes = courses.get(j).getAssignedTATypes();
                            boolean[] availability = students.get(i).getAvailability();
                            String regex = "\\d+";          // regex to check start time.
                            Pattern patt = Pattern.compile(regex);
                            Matcher matcher = patt.matcher(courses.get(j).getStartTime());

                            // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                            if(students.get(i).getCourseAssignment() == 0 && availability[x] && 
                                    matcher.find() && matcher.group().startsWith(String.valueOf(x)) && assignedTATypes[1] == 0)// && students492.get(i).getCoursesTaken().get)
                            {
                                // If course is in person, AND student is on campus, then assign them to that course.
                                if(courses.get(j).getCampus().equalsIgnoreCase("Eburg") && students.get(i).getInEllensburg() == true)
                                {
                                    courses.get(j).setAssignedTAs(students.get(i).getId());
                                    courses.get(j).setAssignedTATypes(true, false);
                                    students.get(i).setCourseAssignment(Integer.parseInt(courses.get(j).getCat()));
                                }
                                // if course is online, and student is online, then assign them to that course.
                                else if(courses.get(j).getCampus().equalsIgnoreCase("Web") && students.get(i).getInEllensburg() == false)
                                {
                                    courses.get(j).setAssignedTAs(students.get(i).getId());
                                    courses.get(j).setAssignedTATypes(true, false);
                                    students.get(i).setCourseAssignment(Integer.parseInt(courses.get(j).getCat()));
                                }
                                else
                                {
                                    // else, either the student is online and the course is in person, or the student in on campus and the course is online
                                    // if the student is on Campus and the course is online, then the student can still be assigned to that course. Save that for later though.
                                }
                            }
                            else
                            {
                                //Else, already has TA, move to next. So probably delete else.
                            }
                        }
                    }

                }
                else if(students.get(i).getPriority() == 2)
                {
                    // assignTAs(2);            //CREATE THIS METHOD
                }
                else if(students.get(i).getPriority() > 2)
                {
                    // assignTAs(3);            //HERE TOO
                }
            }
        }
   }
   
   
   // Set ArrayList<Student> data
   public static void setStudents(ArrayList<Student> students)
   {
       try {
           
           String file= "src//main//java//Files//students.csv";
           BufferedReader reader = new BufferedReader(new FileReader(file));
           
            // Get first two lines
            if ((reader.readLine()) != null)
             reader.readLine();
            if ((reader.readLine()) != null)
             reader.readLine();
            
            String line = "";
            
            while((line = reader.readLine())!= null)
            {
               String[] row = line.split(",");
               Student student = new Student();
               
               
               // ADDING STUDENT ATTRIBUTES: START
               student.setFirstName(row[0]);
               student.setLastName(row[1]);
               student.setId(Integer.parseInt(row[2]));
               student.setEmail(row[3]);
               student.setGraduatingQuarter(row[4]);
               student.setGraduatingYear(Integer.parseInt(row[5]));
               student.setType(Integer.parseInt(row[6]));
               if(row[7].equalsIgnoreCase("Yes"))
                   student.setInEllensburg(true);
               else
                   student.setInEllensburg(false);
               
               // Availability loop
               boolean[] availability = new boolean[32];
               final int END_AVAIL_INPUT = 40;
               for(int i = 8; i < END_AVAIL_INPUT; i++)
               {
                   availability[i - 8] = row[i].equalsIgnoreCase("Open");
               }
               student.setAvailability(availability);
               
               // PythonExperience
               student.setPythonExperience(row[41].equalsIgnoreCase("Yes"));
               // VBExperience (Make shorter)
               student.setVisualBasicExperience(row[42].equalsIgnoreCase("Yes"));
               
               // coursesTaken loop    53
               boolean[] coursesTaken = new boolean[21];
               for(int i = 43; i < row.length; i++)
               {
                   coursesTaken[i - (43)] = row[i].equalsIgnoreCase("X");
               }
               student.setCoursesTaken(coursesTaken);
               
               // Set priority
               student.setPriority();
               
               students.add(student);
               // ADDING STUDENT ATTRIBUTES: COMPLETE
            }
        } catch (IOException ex) {
           //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
   
   // Set Course Data
   public static void setCourseData(ArrayList<Course> courses)
   {
       try {
           
           String file= "src//main//java//Files//schedule.csv";
           BufferedReader reader = new BufferedReader(new FileReader(file));
           String line = "";
           
            // Get first two lines
            if ((reader.readLine()) != null)
                reader.readLine();
            
           while((line = reader.readLine())!= null)
           {
               String[] row = line.split(",");
               Course course = new Course();
               int i = 0;
               
               // ADDING STUDENT ATTRIBUTES: START
               course.setSub(row[i]);
               i++;
               course.setCat(row[i]);
               i++;
               course.setSec(row[i]);
               i++;
               course.setTitle(row[i]);
               i++;
               if(row[4].contains("\""))
                   course.setName(row[i].concat(row[++i]));                     //NO SPACE BETWEEN FIRST/LAST NAME. NEEDS A SPACE THERE.
               else
                   course.setName("");
               i++;
               String[] days = row[i].split(" ");
               course.setDays(days);
               i++;
               course.setStartTime(row[i]);
               i++;
               course.setEndTime(row[i]);
               i++;
               course.setRoom(row[i]);
               i++;
               course.setCampus(row[i]);
               
               courses.add(course);
               // ADDING STUDENT ATTRIBUTES: COMPLETE
           }
       } catch (IOException ex) {
           //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
       }
   }
   
   
   
   
   // Print student data
   public static void printStudentData(ArrayList<Student> students)
   {
       for(int i = 0; i < students.size(); i++)
       {
            System.out.println(students.get(i).getFirstName() + " | " + students.get(i).getLastName() + " | " 
                    + students.get(i).getId() + " | " + students.get(i).getEmail() + " | " 
                    + students.get(i).getGraduatingQuarter() + " | " + students.get(i).getGraduatingYear() + " | " 
                    + students.get(i).getType() + " | " + students.get(i).getInEllensburg() + " | " 
                    + Arrays.toString(students.get(i).getAvailability()) + " | " + students.get(i).getPythonExperience() + " | " 
                    + students.get(i).getVisualBasicExperience() + " | " + Arrays.toString(students.get(i).getCoursesTaken()) + " | " + students.get(i).getPriority() + ".");
       }
   }
   
   // Print course data
   public static void printCourseData(ArrayList<Course> courses)
   {
       for(int i = 0; i < courses.size(); i++)
       {
            System.out.println(courses.get(i).getSub() + "\t" + courses.get(i).getCat() + "\t" + courses.get(i).getSec() 
                   + "\t" + courses.get(i).getTitle() + "\t" + courses.get(i).getName() + "\t" + courses.get(i).getDays() 
                   + "\t" + courses.get(i).getStartTime() + "\t" + courses.get(i).getEndTime() + "\t" + courses.get(i).getRoom() 
                   + "\t" + courses.get(i).getCampus() + " | " + Arrays.toString(courses.get(i).getAssignedTAs()) + " | " + Arrays.toString(courses.get(i).getAssignedTATypes()) + ".");
       }
   }
   
   // Print course assignments
   public static void printCourseAssignments(ArrayList<Course> courses)
   {
       for(int i = 0; i < courses.size(); i++)
       {
            System.out.println(courses.get(i).getSub() + "\t" + courses.get(i).getCat() + "\t" + courses.get(i).getSec() 
                   + "\t" + Arrays.toString(courses.get(i).getAssignedTAs()) + "\t" + Arrays.toString(courses.get(i).getAssignedTATypes()) + ".");
       }
   }
}
