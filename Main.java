package com.mycompany.assignta;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Ramez Khalaf
 */
public class Main extends javax.swing.JFrame {

   static int studentsAssigned = 0;       //these 4 variables are for printing details about the output (see last method called in main)
   static int studentsLeft = 0;
   static int coursesWithOneTA = 0;
   static int coursesWithNoTA = 0;

    /**
     * Creates new form GUI
     */
   public Main() {
      initComponents();
        
        // Center the form
      this.setLocationRelativeTo(null);
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
   
      startButton = new javax.swing.JButton();
      studentTextField = new javax.swing.JTextField();
      scheduleTextField = new javax.swing.JTextField();
      titleLabel = new javax.swing.JLabel();
   
      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setResizable(false);
   
      startButton.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
      startButton.setText("Start");
      startButton.addActionListener(
         new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               startButtonActionPerformed(evt);
            }
         });
   
      studentTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
      studentTextField.setText("Enter students.csv file path here...");
      studentTextField.addActionListener(
         new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               studentTextFieldActionPerformed(evt);
            }
         });
   
      scheduleTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
      scheduleTextField.setText("Enter schedule.csv file path here...");
   
      titleLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
      titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      titleLabel.setText("Assign TAs");
   
      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scheduleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(120, 120, 120))
            .addGroup(layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
      layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(55, 55, 55)
                .addComponent(studentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(scheduleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
         );
   
      pack();
   }// </editor-fold>                        

   private void studentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
   }                                                

    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) {
        /* Create and display the form */
      java.awt.EventQueue.invokeLater(
         new Runnable() {
            public void run() {
               new Main().setVisible(true);
            }
         });
   }
    
   private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        
        // ~~~START CODE~~~
        
      try 
      {
         ArrayList<Student> students = new ArrayList();
         ArrayList<Course> courses = new ArrayList();
         ArrayList<Student> students392 = new ArrayList();
         ArrayList<Student> students492 = new ArrayList();
         final int TYPE392 = 392;
         final int TYPE492 = 492;
            
            
            // Record student data
         setStudents(students);
            // Print ArrayList<Student> data
         System.out.println("\nSTUDENTS: ");
         printStudentData(students);
          
            // Record course data
         setCourseData(courses);
            // Print ArrayList<Course> data
         System.out.println("\nCOURSE SCHEDULE: ");
         printCourseData(courses);
            
            // Sort Students into two ArrayLists (392 and 492)
         for(Student student: students)
         {
            if(student.getType() == TYPE392)
               students392.add(student);
            else
               students492.add(student);
         }
         students.clear();
            
            
            // Sort arraylists by priority
         Collections.sort(students392);
         Collections.sort(students492);
            
            
            // Split 392 students by priority into 3 arrays
         ArrayList<Student> students392_p1 = new ArrayList();
         ArrayList<Student> students392_p2 = new ArrayList();
         ArrayList<Student> students392_remaining = new ArrayList();
         for(int i = 0; i < students392.size(); i++)
         {
            if(students392.get(i).getPriority() == 1)
            {
               students392_p1.add(students392.get(i));
            }
            else if(students392.get(i).getPriority() == 2)
            {
               students392_p2.add(students392.get(i));
            }
            else if(students392.get(i).getPriority() > 2)
            {
               students392_remaining.add(students392.get(i));
            }
         }
            
            // Split 492 students by priority into 3 arrays
         ArrayList<Student> students492_p1 = new ArrayList();
         ArrayList<Student> students492_p2 = new ArrayList();
         ArrayList<Student> students492_remaining = new ArrayList();
         for(int i = 0; i < students492.size(); i++)
         {
            if(students492.get(i).getPriority() == 1)
            {
               students492_p1.add(students492.get(i));
            }
            else if(students492.get(i).getPriority() == 2)
            {
               students492_p2.add(students492.get(i));
            }
            else if(students492.get(i).getPriority() > 2)
            {
               students492_remaining.add(students492.get(i));
            }
         }
            
            // Assign CS 392 Students[]
         assignHighPriority(students492_p1, courses);// , studentsAssigned);
         assignHighPriority(students392_p1, courses);//, studentsAssigned);
         assignHighPriority(students492_p2, courses);//, studentsAssigned);
         assignHighPriority(students392_p2, courses);//, studentsAssigned);
         assignLowPriority(students492_remaining, courses);
         assignLowPriority(students392_remaining, courses);
            
            // Print new ArrayLists
         System.out.println("\nSTUDENTS (CS392): ");
         printStudentData(students392);
         System.out.println("\nSTUDENTS (CS492): ");
         printStudentData(students492);
         System.out.println("\nCourse Assignments: ");
         printCourseAssignments(courses);
         
                        
                        
            // EXTRA HELP
            
         for(int i = 0; i < students492_p1.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p1.get(i) + ", ");
         }
         for(int i = 0; i < students492_p2.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p2.get(i) + ", ");
         }
         for(int i = 0; i < students492_remaining.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p2.get(i) + ", ");
         }
         for(int i = 0; i < students392_p1.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students392_p1.get(i) + ", ");
         }
         for(int i = 0; i < students392_p2.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students392_p2.get(i) + ", ");
         }
         for(int i = 0; i < students492_remaining.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p2.get(i) + ", ");
         }
         System.out.println("\n\nDetails!");
         printDetails(studentsAssigned, studentsLeft, coursesWithOneTA, coursesWithNoTA);
            
            
            /*
            System.out.println("\n392 Students Remaining:");
            System.out.println(students392_p1.size());
            System.out.println(students392_p2.size());
            System.out.println(students392_remaining.size());
            System.out.println("\n492 Students Remaining");
            System.out.println(students492_p1.size());
            System.out.println(students492_p2.size());
            System.out.println(students492_remaining.size());
            */
            
            
            // THEN, CHECK IF THERE ARE ANY LEFTOVER 392/492 students left. If so, put them in any course with less than 2 TAs that works with their availability.
            
            // Sort with comparator. If multiple attributes are equal, then sort by the next priority.
            //I.E., if multiple students graduate 2022, then sort by quarter. If graduation quarter is the same too, then sort by coursesTaken.
            
            /*
                PRIORITY:
                GraduationYear/GraduationQuarter > Courses Taken > VB/Python Experience > Availability > 
            
                *one of each type per course*
            */
            
            /* 
                QUESTIONS:
                How should "In Ellensburg" status influence the algorithm?
                Which classes need VB experience? Python Experience?
            
            */
          
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
        
      studentsAssigned = 0;      
      studentsLeft = 0;
      coursesWithOneTA = 0;
      coursesWithNoTA = 0; 
        
   }
          

    // Variables declaration - do not modify                     
   private static javax.swing.JTextField scheduleTextField;
   private javax.swing.JButton startButton;
   private static javax.swing.JTextField studentTextField;
   private javax.swing.JLabel titleLabel;
    // End of variables declaration                   

    
    //if priority 1, use assignHighPriority() on it first. If priority 2, use assignHighPriority() second. If priority > 2, assignLowPriority.
   //Assign students to courses
   public static void assignHighPriority(ArrayList<Student> students, ArrayList<Course> courses)//, int studentsAssigned)
   {
        //final int NUMBER_OF_HOURS = 32;     // better way to get //8 hours per day * 4 days (counted from students.csv)
        
        if(students.get(0).getType() == 392)
        {
            for(int i = 0; i < courses.size(); i++)
            {
                for(int j = 0; j < students.size(); j++)
                {
                    if(students.get(j).getCourseAssignment().equals(""))
                    {// after this was if(priority == 1){
                        //Check each course to see if it has 0, 1, or 2 TAs.
                        int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                        boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class

                        //System.out.println("HERE: " + students.get(j).getCourseAssignment().equals("") + ", " + available + ", " + (assignedTATypes[0] == 0));
                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                        if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[0] == 0 && 
                                available)// && students392.get(i).getCoursesTaken().get && student.hasPython/VBExperience+courseNeedsThem)
                        {
                            // If course is in person, AND student is on campus, then assign them to that course.
                            if(courses.get(i).getCampus().equalsIgnoreCase("Eburg") && students.get(j).getInEllensburg() == true)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(true, false);

                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            // if course is online, and student is online, then assign them to that course.
                            else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == false)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(true, false);

                                // Set course assignment
                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            else
                            {
                                // else, either the student is online and the course is in person, or the student in on campus and the course is online
                                // if the student is on Campus and the course is online, then the student can still be assigned to that course. Save that for later though.
                            }
                        }
                        else
                        {
                            //Else, already has TA, move to next. So probably delete else.
                        }//AFTER THIS WAS }END PRIORITY
                    }
                }
            }
        }
        else //then student.type == 492
        {
            for(int i = courses.size() - 1; i >= 0; i--)
            {
                for(int j = 0; j < students.size(); j++)
                {
                    if(students.get(j).getCourseAssignment().equals(""))
                    {
                        //Check each course to see if it has 0, 1, or 2 TAs.
                        int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                        boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class

                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                        if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[1] == 0 && 
                                available)// && students392.get(i).getCoursesTaken().get)
                        {
                            // If course is in person, AND student is on campus, then assign them to that course.
                            if(courses.get(i).getCampus().equalsIgnoreCase("Eburg") && students.get(j).getInEllensburg() == true)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(false, true);

                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());

                                studentsAssigned++;
                                students.remove(j);
                            }
                            // if course is online, and student is online, then assign them to that course.
                            else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == false)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(false, true);

                                // Set course assignment
                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            else
                            {
                                // else, either the student is online and the course is in person, or the student in on campus and the course is online
                                // if the student is on Campus and the course is online, then the student can still be assigned to that course. Save that for later though.
                            }
                        }
                        else
                        {
                            //Else, already has TA, move to next. So probably delete else.
                        }
                    }
                }
            }
        }
   }
  
   /*
   This assignment algorithm uses a different algorithm to sort low priority      *STILL NEED TO IMPLEMENT*
   */
   public static void assignLowPriority(ArrayList<Student> students, ArrayList<Course> courses)
   {
       if(students.get(0).getType() == 392)
        {
            for(int i = 0; i < courses.size(); i++)
            {
                for(int j = 0; j < students.size(); j++)
                {
                    if(students.get(j).getCourseAssignment().equals(""))
                    {// after this was if(priority == 1){
                        //Check each course to see if it has 0, 1, or 2 TAs.
                        int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                        boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class

                        //System.out.println("HERE: " + students.get(j).getCourseAssignment().equals("") + ", " + available + ", " + (assignedTATypes[0] == 0));
                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                        if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[0] == 0 && 
                                available)// && students392.get(i).getCoursesTaken().get && student.hasPython/VBExperience+courseNeedsThem)
                        {
                            // If course is in person, AND student is on campus, then assign them to that course.
                            if(courses.get(i).getCampus().equalsIgnoreCase("Eburg") && students.get(j).getInEllensburg() == true)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(true, false);

                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            // if course is online, and student is online, then assign them to that course.
                            else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == false)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(true, false);

                                // Set course assignment
                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            else
                            {
                                // else, either the student is online and the course is in person, or the student in on campus and the course is online
                                // if the student is on Campus and the course is online, then the student can still be assigned to that course. Save that for later though.
                            }
                        }
                        else
                        {
                            //Else, already has TA, move to next. So probably delete else.
                        }//AFTER THIS WAS }END PRIORITY
                    }
                }
            }
        }
        else //then student.type == 492
        {
            for(int i = 0; i < courses.size(); i++)
            {
                for(int j = 0; j < students.size(); j++)
                {
                    if(students.get(j).getCourseAssignment().equals(""))
                    {
                        //Check each course to see if it has 0, 1, or 2 TAs.
                        int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                        boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class

                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                        if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[1] == 0 && 
                                available)// && students392.get(i).getCoursesTaken().get)
                        {
                            // If course is in person, AND student is on campus, then assign them to that course.
                            if(courses.get(i).getCampus().equalsIgnoreCase("Eburg") && students.get(j).getInEllensburg() == true)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(false, true);

                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            // if course is online, and student is online, then assign them to that course.
                            else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == false)
                            {
                                courses.get(i).setAssignedTAs(students.get(j).getId());
                                courses.get(i).setAssignedTATypes(false, true);

                                // Set course assignment
                                String courseAssignmentStr = "";
                                for(int d = 0; d < courses.get(i).getDays().size(); d++)
                                {
                                    courseAssignmentStr = courses.get(i).getDay(d);
                                }
                                students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                                        courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                                        courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                
                                studentsAssigned++;
                                students.remove(j);
                            }
                            else
                            {
                                // else, either the student is online and the course is in person, or the student in on campus and the course is online
                                // if the student is on Campus and the course is online, then the student can still be assigned to that course. Save that for later though.
                            }
                        }
                        else
                        {
                            //Else, already has TA, move to next. So probably delete else.
                        }
                    }
                }
            }
        }
   }
   
   /*
   This assignment algorithm allows adding up to two TAs of the same type (392/492)
   */
   public static void fillRemaining()
   {
       
   }
   
   /* This functiom  actually assigns the student to the courses
   */
   public static void assignCourseStudent(ArrayList<Student> students, ArrayList<Course> courses, int i, int j){
    
      courses.get(i).setAssignedTAs(students.get(j).getId());
      courses.get(i).setAssignedTATypes(true, false);
   
        // Set course assignment
      String courseAssignmentStr = "";
      for(int d = 0; d < courses.get(i).getDays().size(); d++)
      {
         courseAssignmentStr = courses.get(i).getDay(d);
      }
      students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                 courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                 courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
      studentsAssigned++;                       
      students.remove(j);
   
   }
   
   
  //checks if student is available at the time/day of class
   public static boolean isAvailable(ArrayList<Student> students, ArrayList<Course> courses, int i, int j)
   {
      boolean[] availability = students.get(j).getAvailability();
      boolean available = false;      // Will be true if the student is available at the same time/day as the course
        
      for(int y = 0; y < courses.get(i).getDays().size(); y++)
      {
         String classDays = courses.get(i).getDay(y);
         if(classDays.equals("") || classDays.equals(" ") || classDays.matches("[a-zA-Z]+")) //&& student is not low priority)
         {
            if(classDays.equalsIgnoreCase("M"))
            {
               final int STUDENT_AVAIL_INDEX = 8;      // student.getAvailability returns a boolean array. Every 8 entries is another day of the week.
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(classDays.equalsIgnoreCase("T"))
            {
               final int STUDENT_AVAIL_INDEX = 16;
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(classDays.equalsIgnoreCase("W"))
            {
               final int STUDENT_AVAIL_INDEX = 24;
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(classDays.equalsIgnoreCase("TH"))
            {
               final int STUDENT_AVAIL_INDEX = 32;
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(courses.get(i).getCampus().equalsIgnoreCase("WEB"))
            {
               available = true;
            }
         }//Else student wasnt assigned and still needs assignment {
      }//AFTER THSI WAS THE WHILE LOOP END
      return available;
   }
   
   // Set ArrayList<Student> data
   public static void setStudents(ArrayList<Student> students)
   {
      try 
      {
           
         String file = studentTextField.getText();
         BufferedReader reader = new BufferedReader(new FileReader(file));
           
            // Get first two lines
         if ((reader.readLine()) != null)
            reader.readLine();
            
            
         String line = "";
            
         while((line = reader.readLine())!= null)
         {
            if(line.contains(","))
            {
               String[] row = line.split(",");
               Student student = new Student();
            
            
                   // ADDING STUDENT ATTRIBUTES: START
               student.setFirstName(row[0]);
               student.setLastName(row[1]);
               student.setId(Integer.parseInt(row[2]));
               student.setEmail(row[3]);
               student.setGraduatingQuarter(row[4]);
               student.setGraduatingYear(Integer.parseInt(row[5]));
               student.setType(Integer.parseInt(row[6]));
               if(row[7].equalsIgnoreCase("Yes"))
                  student.setInEllensburg(true);
               else
                  student.setInEllensburg(false);
            
                   // Availability loop
               boolean[] availability = new boolean[32];
               final int END_AVAIL_INPUT = 40;
               for(int i = 8; i < END_AVAIL_INPUT; i++)
               {
                  availability[i - 8] = row[i].equalsIgnoreCase("Open");
               }
               student.setAvailability(availability);
            
                   // PythonExperience
               student.setPythonExperience(row[41].equalsIgnoreCase("Yes"));
                   // VBExperience (Make shorter)
               student.setVisualBasicExperience(row[42].equalsIgnoreCase("Yes"));
            
                   // coursesTaken loop    53
               boolean[] coursesTaken = new boolean[21];
               for(int i = 43; i < row.length; i++)
               {
                  coursesTaken[i - (43)] = row[i].equalsIgnoreCase("X");
               }
               student.setCoursesTaken(coursesTaken);
            
                   // Set priority
               student.setPriority();
            
               students.add(student);
                   // ADDING STUDENT ATTRIBUTES: COMPLETE
            }
         }
      } catch (IOException ex) {
           //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
   
   
   // Set Course Data
   public static void setCourseData(ArrayList<Course> courses)
   {
      try {
           
         String file= scheduleTextField.getText();
         BufferedReader reader = new BufferedReader(new FileReader(file));
         String line = "";
           
            // Get first one lines
            
         reader.readLine();
            
         while((line = reader.readLine())!= null)
         {
            String[] row = line.split(",");
            Course course = new Course();
            int i = 0;
               
               // ADDING STUDENT ATTRIBUTES: START
            course.setSub(row[i]);
            i++;
            course.setCat(row[i]);
            i++;
            course.setSec(row[i]);
            i++;
            course.setTitle(row[i]);
            i++;
            if(row[4].contains("\""))
               course.setName(row[i].concat(row[++i]));                     //NO SPACE BETWEEN FIRST/LAST NAME. NEEDS A SPACE THERE.
            else
               course.setName("");
            i++;
            String[] days = row[i].split(" ");
            course.setDays(days);
            i++;
            course.setStartTime(row[i]);
            i++;
            course.setEndTime(row[i]);
            i++;
            course.setRoom(row[i]);
            i++;
            course.setCampus(row[i]);
               
            courses.add(course);
               // ADDING STUDENT ATTRIBUTES: COMPLETE
         }
      } catch (IOException ex) {
           //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
   
   
   
   
   // Print student data
   public static void printStudentData(ArrayList<Student> students)
   {
      for(int i = 0; i < students.size(); i++)
      {
         System.out.println(students.get(i).getFirstName() + " | " + students.get(i).getLastName() + " | " 
                    + students.get(i).getId() + " | " + students.get(i).getEmail() + " | " 
                    + students.get(i).getGraduatingQuarter() + " | " + students.get(i).getGraduatingYear() + " | " 
                    + students.get(i).getType() + " | " + students.get(i).getInEllensburg() + " | " 
                    + Arrays.toString(students.get(i).getAvailability()) + " | " + students.get(i).getPythonExperience() + " | " 
                    + students.get(i).getVisualBasicExperience() + " | " + Arrays.toString(students.get(i).getCoursesTaken()) + " | " + students.get(i).getPriority() + ".");
      }
   }
   
   // Print course data
   public static void printCourseData(ArrayList<Course> courses)
   {
      for(int i = 0; i < courses.size(); i++)
      {
         System.out.println(courses.get(i).getSub() + "\t" + courses.get(i).getCat() + "\t" + courses.get(i).getSec() 
                   + "\t" + courses.get(i).getTitle() + "\t" + courses.get(i).getName() + "\t" + courses.get(i).getDays() 
                   + "\t" + courses.get(i).getStartTime() + "\t" + courses.get(i).getEndTime() + "\t" + courses.get(i).getRoom() 
                   + "\t" + courses.get(i).getCampus() + " | " + Arrays.toString(courses.get(i).getAssignedTAs()) + " | " + Arrays.toString(courses.get(i).getAssignedTATypes()) + ".");
      }
   }
   
   // Print course assignments
   public static void printCourseAssignments(ArrayList<Course> courses)
   {
      for(int i = 0; i < courses.size(); i++)
      {
         System.out.println(courses.get(i).getSub() + "\t" + courses.get(i).getCat() + "\t" + courses.get(i).getSec() 
                   + "\t" + Arrays.toString(courses.get(i).getAssignedTAs()) + "\t" + Arrays.toString(courses.get(i).getAssignedTATypes()) + ".");
      }
   }
   
   //Print at very end
   public static void printDetails(int studentsAssigned, int studentsLeft, int coursesWithOneTA, int coursesWithNoTA)
   {
      System.out.println("Number of students assigned: " + studentsAssigned + 
               "\nNumber of students left: " + studentsLeft + "\nNumber of courses with one TA: " + coursesWithOneTA + "\nNumber of courses with no TA: " + coursesWithNoTA);
   }
}