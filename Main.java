/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package com.mycompany.taasssigner;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;


public class Main extends javax.swing.JFrame {

   static String studentsPath;
   static String schedulesPath;
    
   static int studentsAssigned = 0;       //these 4 variables are for printing details about the output (see last method called in main)
   static int studentsLeft = 0;
   static int coursesWithOneTA = 0;
   static int coursesWithNoTA = 0;

    
    /**
     * Creates new form UI
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentsChooser = new javax.swing.JFileChooser();
        SchedulesChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        studentsBrowse = new javax.swing.JButton();
        ScheduleBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel1.setText("TA Assigner");

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 12)); // NOI18N
        jLabel2.setText("Choose Students.csv");

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 12)); // NOI18N
        jLabel3.setText("Choose Schedule.csv");

        startButton.setFont(new java.awt.Font("Rockwell", 0, 12)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        studentsBrowse.setText("browse");
        studentsBrowse.setName(""); // NOI18N
        studentsBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentsBrowseActionPerformed(evt);
            }
        });

        ScheduleBrowse.setText("browse");
        ScheduleBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(startButton)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(239, 239, 239)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentsBrowse, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ScheduleBrowse, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(151, 151, 151))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(studentsBrowse))
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ScheduleBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(startButton)
                .addGap(68, 68, 68))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studentsBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentsBrowseActionPerformed

       int returnVal = StudentsChooser.showOpenDialog(this);
       if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
           studentsPath = StudentsChooser.getSelectedFile().getAbsolutePath();
           studentsBrowse.setText(StudentsChooser.getSelectedFile().getName());
       } else {
           System.out.println("File access cancelled by user.");
       }
    }//GEN-LAST:event_studentsBrowseActionPerformed

    private void ScheduleBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleBrowseActionPerformed
       int returnVal = SchedulesChooser.showOpenDialog(this);
       if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
           schedulesPath = SchedulesChooser.getSelectedFile().getAbsolutePath();
           ScheduleBrowse.setText(SchedulesChooser.getSelectedFile().getName());
       } else {
           System.out.println("File access cancelled by user.");
       }
    }//GEN-LAST:event_ScheduleBrowseActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
         /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        
        // ~~~START CODE~~~
        
      try 
      {
         ArrayList<Student> students = new ArrayList();
         ArrayList<Course> courses = new ArrayList();
         ArrayList<Student> students392 = new ArrayList();
         ArrayList<Student> students492 = new ArrayList();
         ArrayList<String> takenCourses= new ArrayList(); // courses taken cats
         takenCourses= fillTakenCourses(takenCourses); // filling up the arraylist with courses heading from students.csv
         final int TYPE392 = 392;
         final int TYPE492 = 492;
            
            
            // Record student data
         setStudents(students);
            // Print ArrayList<Student> data
         System.out.println("\nSTUDENTS: ");
         printStudentData(students);
          
            // Record course data
         setCourseData(courses);
            // Print ArrayList<Course> data
         System.out.println("\nCOURSE SCHEDULE: ");
         printCourseData(courses);
            
            // Sort Students into two ArrayLists (392 and 492)
         for(Student student: students)
         {
            if(student.getType() == TYPE392)
               students392.add(student);
            else
               students492.add(student);
         }
         students.clear();
            
            
            // Sort arraylists by priority
         Collections.sort(students392);
         Collections.sort(students492);
            
            
            // Split 392 students by priority into 3 arrays
         ArrayList<Student> students392_p1 = new ArrayList();
         ArrayList<Student> students392_p2 = new ArrayList();
         ArrayList<Student> students392_remaining = new ArrayList();
         for(int i = 0; i < students392.size(); i++)
         {
            if(students392.get(i).getPriority() == 1)
            {
               students392_p1.add(students392.get(i));
            }
            else if(students392.get(i).getPriority() == 2)
            {
               students392_p2.add(students392.get(i));
            }
            else if(students392.get(i).getPriority() > 2)
            {
               students392_remaining.add(students392.get(i));
            }
         }
            
            // Split 492 students by priority into 3 arrays
         ArrayList<Student> students492_p1 = new ArrayList();
         ArrayList<Student> students492_p2 = new ArrayList();
         ArrayList<Student> students492_remaining = new ArrayList();
         for(int i = 0; i < students492.size(); i++)
         {
            if(students492.get(i).getPriority() == 1)
            {
               students492_p1.add(students492.get(i));
            }
            else if(students492.get(i).getPriority() == 2)
            {
               students492_p2.add(students492.get(i));
            }
            else if(students492.get(i).getPriority() > 2)
            {
               students492_remaining.add(students492.get(i));
            }
         }
            
              // Assign CS 392 Students[]
         assignHighPriority(students492_p1, courses,takenCourses);// , studentsAssigned);
         assignHighPriority(students392_p1, courses,takenCourses);//, studentsAssigned);
         assignHighPriority(students492_p2, courses, takenCourses);//, studentsAssigned);
         assignHighPriority(students392_p2, courses, takenCourses);//, studentsAssigned);
         assignLowPriority(students492_remaining, courses, takenCourses);
         assignLowPriority(students392_remaining, courses, takenCourses);
            
            // Print new ArrayLists
         System.out.println("\nSTUDENTS (CS392): ");
         printStudentData(students392);
         System.out.println("\nSTUDENTS (CS492): ");
         printStudentData(students492);
         
         // this fucntions writes the AssignedTA.csv
         //System.out.println("\nCourse Assignments: ");
         printCourseAssignments(courses);
         
                        
                        
            // EXTRA HELP
            
         for(int i = 0; i < students492_p1.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p1.get(i) + ", ");
         }
         for(int i = 0; i < students492_p2.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p2.get(i) + ", ");
         }
         for(int i = 0; i < students492_remaining.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p2.get(i) + ", ");
         }
         for(int i = 0; i < students392_p1.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students392_p1.get(i) + ", ");
         }
         for(int i = 0; i < students392_p2.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students392_p2.get(i) + ", ");
         }
         for(int i = 0; i < students492_remaining.size(); i++)
         {
            studentsLeft++;
                //System.out.println(students492_p2.get(i) + ", ");
         }
         System.out.println("\n\nDetails!");
         printDetails(studentsAssigned, studentsLeft, coursesWithOneTA, coursesWithNoTA);
            
          
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
        
      studentsAssigned = 0;      
      studentsLeft = 0;
      coursesWithOneTA = 0;
      coursesWithNoTA = 0; 

    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

        //if priority 1, use assignHighPriority() on it first. If priority 2, use assignHighPriority() second. If priority > 2, assignLowPriority.
   //Assign students to courses
   public static void assignHighPriority(ArrayList<Student> students, ArrayList<Course> courses,ArrayList<String> takenCourses) throws IOException//, int studentsAssigned)
   {
       //final int NUMBER_OF_HOURS = 32;     // better way to get //8 hours per day * 4 days (counted from students.csv)
        
      if(students.get(0).getType() == 492)
      { 
         for(int i = courses.size() - 1; i >= 0; i--)
         {
            for(int j = 0; j < students.size(); j++)
            {
               if(students.get(j).getCourseAssignment().equals(""))
               {
                        //Check each course to see if it has 0, 1, or 2 TAs.
                  int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                  boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class
               
                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                  if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[1] == 0 && 
                                available)// && students392.get(i).getCoursesTaken().get)
                  {   
                            
                     if(IsPython(students, courses, i, j) == true ){
                        onOffCheck_492(students,courses,takenCourses, i, j);
                         
                     }
                     else if(IsVB(students, courses, i, j) == true ) {
                        onOffCheck_492(students,courses,takenCourses, i, j);
                                
                     }
                     else{ //if((IsPython(students, courses, i, j) == false) && (IsVB(students, courses, i, j) == false)) {
                        onOffCheck_492(students,courses,takenCourses, i, j);
                     } 
                               
                  }
               }
            }
         }
            
      } else //then student.type == 392
      {                             
         for(int i = 0; i < courses.size(); i++)
         {
            for(int j = 0; j < students.size(); j++)
            {
               if(students.get(j).getCourseAssignment().equals(""))
               {// after this was if(priority == 1){
                        //Check each course to see if it has 0, 1, or 2 TAs.
                  int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                  boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class
               
                        //System.out.println("HERE: " + students.get(j).getCourseAssignment().equals("") + ", " + available + ", " + (assignedTATypes[0] == 0));
                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                  if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[0] == 0 && 
                                available)// && students392.get(i).getCoursesTaken().get && student.hasPython/VBExperience+courseNeedsThem)
                  {
                          // python experience check 
                           // python experience check and students has it.
                        
                     if(IsPython(students, courses, i, j) == true ){
                        onOffCheck_392(students,courses,takenCourses, i, j);
                                
                     }
                     else if(IsVB(students, courses, i, j) == true ) {
                        onOffCheck_392(students,courses,takenCourses, i, j);
                            
                     }
                     else{ //if((IsPython(students, courses, i, j) == false) && (IsVB(students, courses, i, j) == false)) { 
                        onOffCheck_392(students,courses,takenCourses, i, j);
                     }  
                  }
                        
               }
            }
         }
            
      }    
            
   }
  
   /*
   This assignment algorithm uses a different algorithm to sort low priority      *STILL NEED TO IMPLEMENT*
   */
   public static void assignLowPriority(ArrayList<Student> students, ArrayList<Course> courses, ArrayList<String> takenCourses) throws IOException
   {
       
      if(students.get(0).getType() == 492)
      {   
         for(int i = 0; i < courses.size(); i++)
         {
            for(int j = 0; j < students.size(); j++)
            {
               if(students.get(j).getCourseAssignment().equals(""))
               {
                        //Check each course to see if it has 0, 1, or 2 TAs.
                  int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                  boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class
               
                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                  if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[1] == 0 && 
                                available) // && students392.get(i).getCoursesTaken().get)
                  {   
                            
                     if(IsPython(students, courses, i, j) == true ){
                        onOffCheck_492(students,courses,takenCourses, i, j);
                                
                     }
                     else if(IsVB(students, courses, i, j) == true ) {
                        onOffCheck_492(students,courses,takenCourses, i, j);
                            
                     }
                     else { //if((IsPython(students, courses, i, j) == false) && (IsVB(students, courses, i, j) == false) ) { 
                        onOffCheck_492(students,courses,takenCourses, i, j);
                     }  
                  }
                      
               }
                   
            }
         }
             // students.type =  392   
      }else {
         for(int i = 0; i < courses.size(); i++)
         {
            for(int j = 0; j < students.size(); j++)
            {
               if(students.get(j).getCourseAssignment().equals(""))
               {// after this was if(priority == 1){
                        //Check each course to see if it has 0, 1, or 2 TAs.
                  int[] assignedTATypes = courses.get(i).getAssignedTATypes();
                  boolean available = isAvailable(students, courses, i, j);   //checks if student is available at the time/day of class
               
                        //System.out.println("HERE: " + students.get(j).getCourseAssignment().equals("") + ", " + available + ", " + (assignedTATypes[0] == 0));
                        // if TA is not already assigned, then add TA. Else, already has TA, move to next.
                  if(students.get(j).getCourseAssignment().equals("") && assignedTATypes[0] == 0 && 
                                available) // && students392.get(i).getCoursesTaken().get && student.hasPython/VBExperience+courseNeedsThem)
                  {
                            // python experience check 
                            // python experience check and students has it.
                            
                     if(IsPython(students, courses, i, j) == true ){
                        onOffCheck_392(students,courses,takenCourses, i, j);
                                
                     }
                     else if(IsVB(students, courses, i, j) == true ) {
                        onOffCheck_392(students,courses,takenCourses, i, j);
                            
                     }
                     else { //if((IsPython(students, courses, i, j) == false) && (IsVB(students, courses, i, j) == false) ) { 
                        onOffCheck_392(students,courses,takenCourses, i, j);
                     }    
                  }   
               }
            }
         }
      }
        
   }
   
   /*check online class, in person class, students in ellebsburg and outside the ellensburg and assign classes to them */
   public static void onOffCheck_392(ArrayList<Student> students, ArrayList<Course> courses,ArrayList<String> takenCourses, int i, int j) throws IOException{
       // If course is in person, AND student is on campus, then assign them to that course.
      if (takenCoursesList(students,courses,takenCourses, i, j) == true){
         if(courses.get(i).getCampus().equalsIgnoreCase("Eburg") && students.get(j).getInEllensburg() == true)
         {
         
            courses.get(i).setAssignedTAs(students.get(j).getId());
            courses.get(i).setAssignedTATypes(true, false);
         
            assignTACourse(students,courses, i, j);
         
         }
             // if course is online, and student is online, then assign them to that course.
         else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == false)
         {
         
            courses.get(i).setAssignedTAs(students.get(j).getId());
            courses.get(i).setAssignedTATypes(true, false);
         
            assignTACourse(students,courses, i, j);
         
         }
              // student is in ellensburg and class is online; student can still be TA for the class. 
         else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == true)
         {
            courses.get(i).setAssignedTAs(students.get(j).getId());
            courses.get(i).setAssignedTATypes(true, false);
         
            assignTACourse(students,courses, i, j);
         
         }
      }
   }
   /* 492 */
   public static void onOffCheck_492(ArrayList<Student> students, ArrayList<Course> courses,ArrayList<String> takenCourses, int i, int j) throws IOException{
       // If course is in person, AND student is on campus, then assign them to that course.
      if (takenCoursesList(students,courses,takenCourses, i, j) == true){ 
         if(courses.get(i).getCampus().equalsIgnoreCase("Eburg") && students.get(j).getInEllensburg() == true)
         {
         
            courses.get(i).setAssignedTAs(students.get(j).getId());
            courses.get(i).setAssignedTATypes(false, true);
         
            assignTACourse(students,courses, i, j);
         
         }
             // if course is online, and student is online, then assign them to that course.
         else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == false)
         {
         
            courses.get(i).setAssignedTAs(students.get(j).getId());
            courses.get(i).setAssignedTATypes(false, true);
         
            assignTACourse(students,courses, i, j);
         
         }
              // student is in ellensburg and class is online; student can still be TA for the class. 
         else if(courses.get(i).getCampus().equalsIgnoreCase("Web") && students.get(j).getInEllensburg() == true)
         {
            courses.get(i).setAssignedTAs(students.get(j).getId());
            courses.get(i).setAssignedTATypes(false, true);
         
            assignTACourse(students,courses, i, j);
         
         }
      }
   }
             
    /*Python experience */
   public static boolean IsPython(ArrayList<Student> students, ArrayList<Course> courses, int i, int j){
   
      if(courses.get(i).getCat().equals("109") && students.get(j).getPythonExperience()== true ){
         return true;
      }
      else if(courses.get(i).getCat().equals("112") && students.get(j).getPythonExperience()== true ) {
         return true;
      }
      else { 
            
         return false;
      }   
   }
   /*Visual Basic Experience*/
   public static boolean IsVB(ArrayList<Student> students, ArrayList<Course> courses, int i , int j ) {
      if(courses.get(i).getCat().equals("105") && students.get(j).getVisualBasicExperience()== true ){
         System.out.println(students.get(j).getId());
         return true;
      }
      else if(courses.get(i).getCat().equals("367") && students.get(j).getVisualBasicExperience()== true ) {
         return true;
      }
      else {
                
         return false;
      }   
   }
   
   // Courses taken check 
   public static boolean takenCoursesList(ArrayList<Student> students, ArrayList<Course> courses,ArrayList<String> takenCourses, int i, int j) throws FileNotFoundException, IOException{
       
      // System.out.println((takenCourses));
      boolean [] cor= students.get(j).getCoursesTaken();
      // System.out.println(Arrays.toString(cor));
      // coursetoLook is the course we are about assign to student but need to check if the student has taken it. 
      String courseToLook= courses.get(i).getCat();
     // System.out.println(courseToLook);
     
      //index of given course in takenCourse arrayList
      int pos= takenCourses.indexOf(courseToLook);
      
      if( pos < 0)
      {
       //System.out.println("there is no course ");
         return false;
      }
      else if( pos> 0 && cor[pos]== true ){
         // System.out.println("course is taken by student ");
         return  true;
      }
       
       //if( courses.get(i).getCat()== takenCat) && if students.get(j).getCoursesTaken()== true)
      // }
        
        
      return false;  
   }
   
   // fils up the takenCourses arrayList with only Cat number
   
   public static ArrayList<String> fillTakenCourses(ArrayList<String> takenCourses) throws FileNotFoundException, IOException{
      String file = studentsPath;
      BufferedReader reader = new BufferedReader(new FileReader(file));
           
            // Get first line
      reader.readLine();
      String line ="";
           
      line= reader.readLine();
         //System.out.println(line);
      String [] row1= line.split(",");
      String cat= "";
      String catonly= "";
       
        // String[] takenCourses= new String [row1.length-43];  
      for(int x = 42; x < row1.length; x++){
         cat= row1[x];
         catonly= cat.replaceAll("[^0-9]", "");
             
         takenCourses.add(catonly);
      }
      return takenCourses;
   }
      
   /*Actual Assignmanet fuction  */
   public static void assignTACourse(ArrayList<Student> students, ArrayList<Course> courses, int i, int j){
       

        // Set course assignment
        String courseAssignmentStr = "";
        for(int d = 0; d < courses.get(i).getDays().size(); d++)
         {
             courseAssignmentStr = courses.get(i).getDay(d);
         }
         students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                    courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                    courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
                                
                                
         studentsAssigned++;
         students.remove(j);
   
   }
   /*
   This assignment algorithm allows adding up to two TAs of the same type (392/492)
   */
   public static void fillRemaining()
   {
       
   }
   
   /* This functiom  actually assigns the student to the courses
   */
   public static void assignCourseStudent(ArrayList<Student> students, ArrayList<Course> courses, int i, int j){
    
      courses.get(i).setAssignedTAs(students.get(j).getId());
      courses.get(i).setAssignedTATypes(true, false);
   
        // Set course assignment
      String courseAssignmentStr = "";
      for(int d = 0; d < courses.get(i).getDays().size(); d++)
      {
         courseAssignmentStr = courses.get(i).getDay(d);
      }
      students.get(j).setCourseAssignment(courses.get(i).getSub() + courses.get(i).getCat() + 
                 courses.get(i).getSec() + courses.get(i).getTitle() + courses.get(i).getName() + 
                 courseAssignmentStr + courses.get(i).getRoom() + courses.get(i).getCampus());
      studentsAssigned++;                       
      students.remove(j);
   
   }
   
   
  //checks if student is available at the time/day of class
   public static boolean isAvailable(ArrayList<Student> students, ArrayList<Course> courses, int i, int j)
   {
      boolean[] availability = students.get(j).getAvailability();
      boolean available = false;      // Will be true if the student is available at the same time/day as the course
        
      for(int y = 0; y < courses.get(i).getDays().size(); y++)
      {
         String classDays = courses.get(i).getDay(y);
         if(classDays.equals("") || classDays.equals(" ") || classDays.matches("[a-zA-Z]+")) //&& student is not low priority)
         {
            if(classDays.equalsIgnoreCase("M"))
            {
               final int STUDENT_AVAIL_INDEX = 8;      // student.getAvailability returns a boolean array. Every 8 entries is another day of the week.
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(classDays.equalsIgnoreCase("T"))
            {
               final int STUDENT_AVAIL_INDEX = 16;
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(classDays.equalsIgnoreCase("W"))
            {
               final int STUDENT_AVAIL_INDEX = 24;
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(classDays.equalsIgnoreCase("TH"))
            {
               final int STUDENT_AVAIL_INDEX = 32;
               for(int z = 0; z < STUDENT_AVAIL_INDEX; z++)
               {
                  if(availability[z])
                  {
                     available = true;
                  }
               }
            }
            else if(courses.get(i).getCampus().equalsIgnoreCase("WEB"))
            {
               available = true;
            }
         }//Else student wasnt assigned and still needs assignment {
      }//AFTER THSI WAS THE WHILE LOOP END
      return available;
   }
   
   // Set ArrayList<Student> data
   public static void setStudents(ArrayList<Student> students)
   {
      try 
      {
           
         String file = studentsPath;
         // file extension check 
         String ext="";
         if (file.contains("")){
            ext= file.substring(file.lastIndexOf("."));
         }
         if (ext.equals(".csv") ){
         } else {
            JOptionPane.showMessageDialog(null, "Wrong File Extension,ONLY .CSV files are allowed");
         }
        
         BufferedReader reader = new BufferedReader(new FileReader(file));
           
            // Get first line
         reader.readLine();
         
         
         //keep the name of the courses to check them for courses taken condition. 
         String line ="";
         
         
         //Get second line 
         
         reader.readLine();
            
         while((line = reader.readLine())!= null)
         {
            if(line.contains(","))
            {
               String[] row = line.split(",");
               Student student = new Student();
            
            
                   // ADDING STUDENT ATTRIBUTES: START
               student.setFirstName(row[0]);
               student.setLastName(row[1]);
               student.setId(Integer.parseInt(row[2]));
               student.setEmail(row[3]);
               student.setGraduatingQuarter(row[4]);
               student.setGraduatingYear(Integer.parseInt(row[5]));
               student.setType(Integer.parseInt(row[6]));
               if(row[7].equalsIgnoreCase("Yes"))
                  student.setInEllensburg(true);
               else
                  student.setInEllensburg(false);
            
                   // Availability loop
               boolean[] availability = new boolean[32];
               final int END_AVAIL_INPUT = 40;
               for(int i = 8; i < END_AVAIL_INPUT; i++)
               {
                  availability[i - 8] = row[i].equalsIgnoreCase("Open");
               }
               student.setAvailability(availability);
            
                   // PythonExperience
               student.setPythonExperience(row[41].equalsIgnoreCase("Yes"));
                   // VBExperience (Make shorter)
               student.setVisualBasicExperience(row[42].equalsIgnoreCase("Yes"));
               
            
                   // coursesTaken loop    53
               boolean[] coursesTaken = new boolean[21];
               for(int i = 43; i < row.length; i++)
               {
                  coursesTaken[i - (43)] = row[i].equalsIgnoreCase("X");
               }
               student.setCoursesTaken(coursesTaken);
            
                   // Set priority
               student.setPriority();
            
               students.add(student);
                   // ADDING STUDENT ATTRIBUTES: COMPLETE
            }
         }
      } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File Not Found, please re-start the program");
           //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
   
   
   // Set Course Data
   public static void setCourseData(ArrayList<Course> courses)
   {
      try {
           
         String file= schedulesPath;
         // keep the extension of the file.
         String ext="";
         if (file.contains("")){
            ext= file.substring(file.lastIndexOf("."));
         }
         if (!ext.equals(".csv") ){
            JOptionPane.showMessageDialog(null, "Wrong File Extension, ONLY .CSV files are allowed");
         }
         BufferedReader reader = new BufferedReader(new FileReader(file));
         String line = "";
            // Get first one lines
            
         reader.readLine();
            
         while((line = reader.readLine())!= null)
         {
            String[] row = line.split(",");
            Course course = new Course();
            int i = 0;
               
               // ADDING STUDENT ATTRIBUTES: START
            course.setSub(row[i]);
            i++;
            course.setCat(row[i]);
            i++;
            course.setSec(row[i]);
            i++;
            course.setTitle(row[i]);
            i++;
            if(row[4].contains("\""))
               course.setName(row[i].concat(row[++i]));                     //NO SPACE BETWEEN FIRST/LAST NAME. NEEDS A SPACE THERE.
            else
               course.setName("");
            i++;
            String[] days = row[i].split(" ");
            course.setDays(days);
            i++;
            course.setStartTime(row[i]);
            i++;
            course.setEndTime(row[i]);
            i++;
            course.setRoom(row[i]);
            i++;
            course.setCampus(row[i]);
               
            courses.add(course);
               // ADDING STUDENT ATTRIBUTES: COMPLETE
         }
      } catch (IOException ex) {
           //Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
   
   
   
   
   // Print student data
   public static void printStudentData(ArrayList<Student> students)
   {
      for(int i = 0; i < students.size(); i++)
      {
         System.out.println(students.get(i).getFirstName() + " | " + students.get(i).getLastName() + " | " 
                    + students.get(i).getId() + " | " + students.get(i).getEmail() + " | " 
                    + students.get(i).getGraduatingQuarter() + " | " + students.get(i).getGraduatingYear() + " | " 
                    + students.get(i).getType() + " | " + students.get(i).getInEllensburg() + " | " 
                    + Arrays.toString(students.get(i).getAvailability()) + " | " + students.get(i).getPythonExperience() + " | " 
                    + students.get(i).getVisualBasicExperience() + " | " + Arrays.toString(students.get(i).getCoursesTaken()) + " | " + students.get(i).getPriority() + ".");
      }
   }
   
   // Print course data
   public static void printCourseData(ArrayList<Course> courses)
   {
      for(int i = 0; i < courses.size(); i++)
      {
         System.out.println(courses.get(i).getSub() + "\t" + courses.get(i).getCat() + "\t" + courses.get(i).getSec() 
                   + "\t" + courses.get(i).getTitle() + "\t" + courses.get(i).getName() + "\t" + courses.get(i).getDays() 
                   + "\t" + courses.get(i).getStartTime() + "\t" + courses.get(i).getEndTime() + "\t" + courses.get(i).getRoom() 
                   + "\t" + courses.get(i).getCampus() + " | " + Arrays.toString(courses.get(i).getAssignedTAs()) + " | " + Arrays.toString(courses.get(i).getAssignedTATypes()) + ".");
      }
   }
   
   // Writes  course assignments into CSV file  
   public static void printCourseAssignments(ArrayList<Course> courses) throws FileNotFoundException
   {
       // get the path of students.csv file to output the file in same directory. 
      String path = studentsPath;
      String newPath= new File(path).getParent();
       
      File csvFile= new File(newPath,"AssignedTA.csv");
      PrintWriter out = new PrintWriter(csvFile);
       // headers for the output file. 
      out.println("Sub"+","+"Cat"+","+ "Sec"+","+"TA's Student ID  "+","+ " TA's Student ID ");
       
       
      for(int i = 0; i < courses.size(); i++)
      {
          /*
         out.println( courses.get(i).getSub()+ "," +courses.get(i).getCat()+ "," +courses.get(i).getSec()+ "," Arrays.toString(courses.get(i).getAssignedTAs()));
         */
         out.println(courses.get(i).getSub() + "," + courses.get(i).getCat() + "," + courses.get(i).getSec() 
                   + "," + Arrays.toString(courses.get(i).getAssignedTAs()).replace("[","").replace("]",""));
         
      }
      out.close();
      JOptionPane.showMessageDialog(null, "TAs has been assigned and File created as AssignedTA.csv in path "+ newPath);
      System.exit(0);
   }
   
   //Print at very end
   public static void printDetails(int studentsAssigned, int studentsLeft, int coursesWithOneTA, int coursesWithNoTA)
   {
      System.out.println("Number of students assigned: " + studentsAssigned + 
               "\nNumber of students left: " + studentsLeft + "\nNumber of courses with one TA: " + coursesWithOneTA + "\nNumber of courses with no TA: " + coursesWithNoTA);
   }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ScheduleBrowse;
    private javax.swing.JFileChooser SchedulesChooser;
    private javax.swing.JFileChooser StudentsChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton startButton;
    private javax.swing.JButton studentsBrowse;
    // End of variables declaration//GEN-END:variables
}
